{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkProps;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\n\nvar _useLinkTo = _interopRequireDefault(require(\"./useLinkTo\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n\nfunction useLinkProps(_ref) {\n  var _options$getPathFromS;\n\n  var to = _ref.to,\n      action = _ref.action;\n  var root = React.useContext(_core.NavigationContainerRefContext);\n  var navigation = React.useContext(_core.NavigationHelpersContext);\n\n  var _React$useContext = React.useContext(_LinkingContext.default),\n      options = _React$useContext.options;\n\n  var linkTo = (0, _useLinkTo.default)();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (_reactNative.Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  var getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : _core.getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["getStateFromParams","params","routes","name","state","undefined","action","root","React","navigation","options","linkTo","onPress","e","shouldHandle","Platform","getPathFromStateHelper","href","to","accessibilityRole"],"mappings":"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","sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}