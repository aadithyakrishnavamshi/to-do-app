{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFonts = useFonts;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _Font = require(\"./Font\");\n\nfunction useFonts(map) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    (0, _Font.loadAsync)(map).then(function () {\n      return setLoaded(true);\n    }).catch(setError);\n  }, []);\n  return [loaded, error];\n}","map":{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAqBM,SAAU,QAAV,CAAmB,GAAnB,EAA2D;EAC/D,gBAA4B,IAAA,eAAA,EAAS,KAAT,CAA5B;EAAA;EAAA,IAAO,MAAP;EAAA,IAAe,SAAf;;EACA,iBAA0B,IAAA,eAAA,EAAuB,IAAvB,CAA1B;EAAA;EAAA,IAAO,KAAP;EAAA,IAAc,QAAd;;EAEA,IAAA,gBAAA,EAAU,YAAK;IACb,IAAA,eAAA,EAAU,GAAV,EACG,IADH,CACQ;MAAA,OAAM,SAAS,CAAC,IAAD,CAAf;IAAA,CADR,EAEG,KAFH,CAES,QAFT;EAGD,CAJD,EAIG,EAJH;EAMA,OAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasync). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport function useFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}