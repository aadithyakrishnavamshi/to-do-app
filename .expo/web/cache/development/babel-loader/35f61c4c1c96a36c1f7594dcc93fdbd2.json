{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinking;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@react-navigation/core\");\n\nvar _fastDeepEqual = _interopRequireDefault(require(\"fast-deep-equal\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createMemoryHistory = _interopRequireDefault(require(\"./createMemoryHistory\"));\n\nvar _ServerContext = _interopRequireDefault(require(\"./ServerContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n\n  var callback = function _callee() {\n    var last;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return _regenerator.default.awrap(cb());\n\n          case 7:\n            _context.prev = 7;\n            handling = false;\n\n            if (queue.length) {\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n\n            return _context.finish(7);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0,, 7, 11]], Promise);\n  };\n\n  return callback;\n};\n\nvar linkingHandlers = [];\n\nfunction useLinking(ref, _ref) {\n  var independent = _ref.independent,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      config = _ref.config,\n      _ref$getStateFromPath = _ref.getStateFromPath,\n      getStateFromPath = _ref$getStateFromPath === void 0 ? _core.getStateFromPath : _ref$getStateFromPath,\n      _ref$getPathFromState = _ref.getPathFromState,\n      getPathFromState = _ref$getPathFromState === void 0 ? _core.getPathFromState : _ref$getPathFromState,\n      _ref$getActionFromSta = _ref.getActionFromState,\n      getActionFromState = _ref$getActionFromSta === void 0 ? _core.getActionFromState : _ref$getActionFromSta;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    var handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  var _React$useState = React.useState(_createMemoryHistory.default),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n      history = _React$useState2[0];\n\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(_ServerContext.default);\n  var getInitialState = React.useCallback(function () {\n    var value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n\n      var path = _location ? _location.pathname + _location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n\n      var navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      var state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        var rootState = navigation.getRootState();\n\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + (typeof e === 'object' && e != null && 'message' in e ? e.message : e));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    var getPathForRoute = function getPathForRoute(route, state) {\n      if (route !== null && route !== void 0 && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          var focusedRoute = (0, _core.findFocusedRoute)(stateForPath);\n\n          if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      var state = ref.current.getRootState();\n\n      if (state) {\n        var route = (0, _core.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n\n    var onStateChange = function _callee2() {\n      var navigation, previousState, state, pendingPath, route, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n\n              if (state) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              pendingPath = pendingPopStatePathRef.current;\n              route = (0, _core.findFocusedRoute)(state);\n              path = getPathForRoute(route, state);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined;\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = (0, _slicedToArray2.default)(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n\n              if (!(previousFocusedState && focusedState && path !== pendingPath)) {\n                _context2.next = 40;\n                break;\n              }\n\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n              if (!(historyDelta > 0)) {\n                _context2.next = 19;\n                break;\n              }\n\n              history.push({\n                path: path,\n                state: state\n              });\n              _context2.next = 38;\n              break;\n\n            case 19:\n              if (!(historyDelta < 0)) {\n                _context2.next = 37;\n                break;\n              }\n\n              nextIndex = history.backIndex({\n                path: path\n              });\n              currentIndex = history.index;\n              _context2.prev = 22;\n\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 28;\n                break;\n              }\n\n              _context2.next = 26;\n              return _regenerator.default.awrap(history.go(nextIndex - currentIndex));\n\n            case 26:\n              _context2.next = 30;\n              break;\n\n            case 28:\n              _context2.next = 30;\n              return _regenerator.default.awrap(history.go(historyDelta));\n\n            case 30:\n              history.replace({\n                path: path,\n                state: state\n              });\n              _context2.next = 35;\n              break;\n\n            case 33:\n              _context2.prev = 33;\n              _context2.t0 = _context2[\"catch\"](22);\n\n            case 35:\n              _context2.next = 38;\n              break;\n\n            case 37:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 38:\n              _context2.next = 41;\n              break;\n\n            case 40:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 41:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[22, 33]], Promise);\n    };\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","cb","handling","queue","callback","last","linkingHandlers","enabled","getStateFromPath","getPathFromState","getActionFromState","getActionFromStateDefault","React","process","console","handler","Symbol","index","enabledRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","server","getInitialState","location","window","path","value","thenable","then","Promise","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","history","navigation","ref","previousIndex","record","state","rootState","r","action","e","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","isEqual","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex","currentIndex"],"mappings":"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","sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}