{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusEvents;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useFocusEvents(_ref) {\n  var state = _ref.state,\n      emitter = _ref.emitter;\n  var navigation = React.useContext(_NavigationContext.default);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["emitter","navigation","React","lastFocusedKeyRef","currentFocusedKey","state","type","target","lastFocusedKey"],"mappings":";;;;;;;AACA;;AAEA;;;;;;AAYe,SAAA,cAAA,CAAA,IAAA,EAGI;EAHmD,IAAA,KAAA,GAGnD,IAHmD,CAAA,KAAA;EAAA,IAEpEA,OAFoE,GAGnD,IAHmD,CAEpEA,OAFoE;EAIpE,IAAMC,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,0BAAmBA,CAAnB;EACA,IAAMC,iBAAiB,GAAGD,KAAK,CAA/B,MAA0BA,EAA1B;EAEA,IAAME,iBAAiB,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAJT,GAIjB;EAIAH,KAAK,CAALA,SAAAA,CACE;IAAA,OACE,UADF,KAAA,IACE,IAAA,UADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiC,YAAM;MACrCC,iBAAiB,CAAjBA,OAAAA,GAAAA,iBAAAA;MACAH,OAAO,CAAPA,IAAAA,CAAa;QAAEM,IAAI,EAAN,OAAA;QAAiBC,MAAM,EAAEH;MAAzB,CAAbJ;IAJNE,CAEI,CADF;EAAA,CADFA,EAME,CAAA,iBAAA,EAAA,OAAA,EANFA,UAME,CANFA;EASAA,KAAK,CAALA,SAAAA,CACE;IAAA,OACE,UADF,KAAA,IACE,IAAA,UADF,KAAA,KAAA,CACE,GADF,KAAA,CACE,GAAA,UAAU,CAAV,WAAA,CAAA,MAAA,EAAgC,YAAM;MACpCC,iBAAiB,CAAjBA,OAAAA,GAAAA,SAAAA;MACAH,OAAO,CAAPA,IAAAA,CAAa;QAAEM,IAAI,EAAN,MAAA;QAAgBC,MAAM,EAAEH;MAAxB,CAAbJ;IAJNE,CAEI,CADF;EAAA,CADFA,EAME,CAAA,iBAAA,EAAA,OAAA,EANFA,UAME,CANFA;EASAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMM,cAAc,GAAGL,iBAAiB,CAAxC,OAAA;IAEAA,iBAAiB,CAAjBA,OAAAA,GAHoB,iBAGpBA;;IAIA,IAAIK,cAAc,KAAdA,SAAAA,IAAgC,CAApC,UAAA,EAAiD;MAC/CR,OAAO,CAAPA,IAAAA,CAAa;QAAEM,IAAI,EAAN,OAAA;QAAiBC,MAAM,EAAEH;MAAzB,CAAbJ;IARkB;;IAapB,IACEQ,cAAc,KAAdA,iBAAAA,IACA,EAAEP,UAAU,GAAGA,UAAU,CAAb,SAAGA,EAAH,GAFd,IAEE,CAFF,EAGE;MACA;IACD;;IAED,IAAIO,cAAc,KAAlB,SAAA,EAAkC;MAEhC;IACD;;IAEDR,OAAO,CAAPA,IAAAA,CAAa;MAAEM,IAAI,EAAN,MAAA;MAAgBC,MAAM,EAAEC;IAAxB,CAAbR;IACAA,OAAO,CAAPA,IAAAA,CAAa;MAAEM,IAAI,EAAN,OAAA;MAAiBC,MAAM,EAAEH;IAAzB,CAAbJ;EA1BFE,CAAAA,EA2BG,CAAA,iBAAA,EAAA,OAAA,EA3BHA,UA2BG,CA3BHA;AA4BD","sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"script"}