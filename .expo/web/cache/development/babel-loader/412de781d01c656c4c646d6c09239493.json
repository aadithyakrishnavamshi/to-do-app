{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CHILD_STATE = void 0;\nexports.default = useRouteCache;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _excluded = [\"state\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar CHILD_STATE = Symbol('CHILD_STATE');\nexports.CHILD_STATE = CHILD_STATE;\n\nfunction useRouteCache(routes) {\n  var cache = React.useMemo(function () {\n    return {\n      current: new Map()\n    };\n  }, []);\n\n  if (process.env.NODE_ENV === 'production') {\n    return routes;\n  }\n\n  cache.current = routes.reduce(function (acc, route) {\n    var previous = cache.current.get(route);\n\n    if (previous) {\n      acc.set(route, previous);\n    } else {\n      var state = route.state,\n          proxy = (0, _objectWithoutProperties2.default)(route, _excluded);\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["CHILD_STATE","Symbol","cache","current","process","previous","acc","proxy","Object","enumerable","value","state","Array"],"mappings":";;;;;;;;;;AAKA;;;;;;;;AAWO,IAAMA,WAAW,GAAGC,MAAM,CAA1B,aAA0B,CAA1B;;;AAMQ,SAAA,aAAA,CAAA,MAAA,EAEb;EAEA,IAAMC,KAAK,GAAG,KAAK,CAAL,OAAA,CAAc;IAAA,OAAO;MAAEC,OAAO,EAAE,IAAA,GAAA;IAAX,CAAP;EAAA,CAAd,EAAd,EAAc,CAAd;;EAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;IAEzC,OAAA,MAAA;EACD;;EAEDF,KAAK,CAALA,OAAAA,GAAgB,MAAM,CAAN,MAAA,CAAc,UAAA,GAAA,EAAA,KAAA,EAAgB;IAC5C,IAAMG,QAAQ,GAAGH,KAAK,CAALA,OAAAA,CAAAA,GAAAA,CAAjB,KAAiBA,CAAjB;;IAEA,IAAA,QAAA,EAAc;MAEZI,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,EAAAA,QAAAA;IAFF,CAAA,MAGO;MACL,IAAM,KAAN,GAAA,KAAA,CAAM,KAAN;MAAA,IAAkBC,KAAlB,0CAAA,KAAA;MAEAC,MAAM,CAANA,cAAAA,CAAAA,KAAAA,EAAAA,WAAAA,EAA0C;QACxCC,UAAU,EAD8B,KAAA;QAExCC,KAAK,EAAEC;MAFiC,CAA1CH;MAKAF,GAAG,CAAHA,GAAAA,CAAAA,KAAAA,EAAAA,KAAAA;IACD;;IAED,OAAA,GAAA;EAjBc,CAAA,EAkBb,IAlBHJ,GAkBG,EAlBa,CAAhBA;EAoBA,OAAOU,KAAK,CAALA,IAAAA,CAAWV,KAAK,CAALA,OAAAA,CAAlB,MAAkBA,EAAXU,CAAP;AACD","sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]},"metadata":{},"sourceType":"script"}