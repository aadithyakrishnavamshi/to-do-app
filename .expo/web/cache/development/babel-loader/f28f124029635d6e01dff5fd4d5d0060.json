{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = usePressEvents;\n\nvar _PressResponder = _interopRequireDefault(require(\"./PressResponder\"));\n\nvar _react = require(\"react\");\n\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n\n  var pressResponder = pressResponderRef.current;\n  (0, _react.useEffect)(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  (0, _react.useEffect)(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}","map":{"version":3,"names":["usePressEvents","hostRef","config","pressResponderRef","useRef","current","PressResponder","pressResponder","useEffect","configure","reset","useDebugValue","getEventHandlers"],"sources":["C:/Users/adars/AdarshToDo/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"],"mappings":"AASA;;;;;;;;;AAEA;;AACA;;AACe,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;EACtD,IAAIC,iBAAiB,GAAG,IAAAC,aAAA,EAAO,IAAP,CAAxB;;EAEA,IAAID,iBAAiB,CAACE,OAAlB,IAA6B,IAAjC,EAAuC;IACrCF,iBAAiB,CAACE,OAAlB,GAA4B,IAAIC,uBAAJ,CAAmBJ,MAAnB,CAA5B;EACD;;EAED,IAAIK,cAAc,GAAGJ,iBAAiB,CAACE,OAAvC;EAEA,IAAAG,gBAAA,EAAU,YAAY;IACpBD,cAAc,CAACE,SAAf,CAAyBP,MAAzB;EACD,CAFD,EAEG,CAACA,MAAD,EAASK,cAAT,CAFH;EAKA,IAAAC,gBAAA,EAAU,YAAY;IACpB,OAAO,YAAY;MACjBD,cAAc,CAACG,KAAf;IACD,CAFD;EAGD,CAJD,EAIG,CAACH,cAAD,CAJH;EAKA,IAAAI,oBAAA,EAAcT,MAAd;EACA,OAAOK,cAAc,CAACK,gBAAf,EAAP;AACD"},"metadata":{},"sourceType":"script"}