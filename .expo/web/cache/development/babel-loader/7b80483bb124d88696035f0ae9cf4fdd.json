{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useKeyedChildListeners;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useKeyedChildListeners() {\n  var _React$useRef = React.useRef({\n    getState: {},\n    beforeRemove: {}\n  }),\n      keyedListeners = _React$useRef.current;\n\n  var addKeyedListener = React.useCallback(function (type, key, listener) {\n    keyedListeners[type][key] = listener;\n    return function () {\n      keyedListeners[type][key] = undefined;\n    };\n  }, [keyedListeners]);\n  return {\n    keyedListeners: keyedListeners,\n    addKeyedListener: addKeyedListener\n  };\n}","map":{"version":3,"sources":["useKeyedChildListeners.tsx"],"names":["current","keyedListeners","getState","beforeRemove","addKeyedListener"],"mappings":";;;;;AAAA;;;;;;AAOe,SAAA,sBAAA,GAAkC;EAC/C,oBAAoC,KAAK,CAAL,MAAA,CAKjC;IACDE,QAAQ,EADP,EAAA;IAEDC,YAAY,EAAE;EAFb,CALiC,CAApC;EAAA,IAAiBF,cAAjB,iBAAQD,OAAR;;EAUA,IAAMI,gBAAgB,GAAG,KAAK,CAAL,WAAA,CACvB,UAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAIK;IAEHH,cAAc,CAAdA,IAAc,CAAdA,CAAAA,GAAAA,IAAAA,QAAAA;IAEA,OAAO,YAAM;MAEXA,cAAc,CAAdA,IAAc,CAAdA,CAAAA,GAAAA,IAAAA,SAAAA;IAFF,CAAA;EATqB,CAAA,EAcvB,CAdF,cAcE,CAduB,CAAzB;EAiBA,OAAO;IACLA,cADK,EACLA,cADK;IAELG,gBAAAA,EAAAA;EAFK,CAAP;AAID","sourcesContent":["import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>({\n    getState: {},\n    beforeRemove: {},\n  });\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: according to ref stated above you can use `key` to index type\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}