{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventEmitter = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\nvar EventEmitter = function () {\n  function EventEmitter(nativeModule) {\n    (0, _classCallCheck2.default)(this, EventEmitter);\n    this._listenerCount = 0;\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);\n  }\n\n  (0, _createClass2.default)(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      var _this = this,\n          _subscription;\n\n      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n        this._nativeModule.startObserving();\n      }\n\n      this._listenerCount++;\n\n      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n      var subscription = (_subscription = {}, (0, _defineProperty2.default)(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), (0, _defineProperty2.default)(_subscription, \"remove\", function remove() {\n        _this.removeSubscription(subscription);\n      }), _subscription);\n      return subscription;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var removedListenerCount = this._eventEmitter.listenerCount ? this._eventEmitter.listenerCount(eventName) : this._eventEmitter.listeners(eventName).length;\n\n      this._eventEmitter.removeAllListeners(eventName);\n\n      this._listenerCount -= removedListenerCount;\n      (0, _invariant.default)(this._listenerCount >= 0, \"EventEmitter must have a non-negative number of listeners\");\n\n      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n        this._nativeModule.stopObserving();\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n      if (!nativeEmitterSubscription) {\n        return;\n      }\n\n      if ('remove' in nativeEmitterSubscription) {\n        nativeEmitterSubscription.remove();\n      } else if ('removeSubscription' in this._eventEmitter) {\n        this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n      }\n\n      this._listenerCount--;\n      delete subscription[nativeEmitterSubscriptionKey];\n\n      subscription.remove = function () {};\n\n      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n        this._nativeModule.stopObserving();\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this$_eventEmitter;\n\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));\n    }\n  }]);\n  return EventEmitter;\n}();\n\nexports.EventEmitter = EventEmitter;","map":{"version":3,"sources":["../src/EventEmitter.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAM,4BAA4B,GAAG,+BAArC;;IAiBa,Y;EAKX,sBAAY,YAAZ,EAAsC;IAAA;IAAA,KAJtC,cAIsC,GAJrB,CAIqB;IACpC,KAAK,aAAL,GAAqB,YAArB;IACA,KAAK,aAAL,GAAqB,IAAI,+BAAJ,CAAuB,YAAvB,CAArB;EACD;;;;WAED,qBAAe,SAAf,EAAkC,QAAlC,EAA8D;MAAA;MAAA;;MAC5D,IAAI,CAAC,KAAK,cAAN,IAAwB,qBAAA,CAAS,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,cAAxE,EAAwF;QACtF,KAAK,aAAL,CAAmB,cAAnB;MACD;;MAED,KAAK,cAAL;;MACA,IAAM,yBAAyB,GAAG,KAAK,aAAL,CAAmB,WAAnB,CAA+B,SAA/B,EAA0C,QAA1C,CAAlC;;MACA,IAAM,YAAY,qEACf,4BADe,EACgB,yBADhB,0DAER,kBAAK;QACX,KAAI,CAAC,kBAAL,CAAwB,YAAxB;MACD,CAJe,iBAAlB;MAMA,OAAO,YAAP;IACD;;;WAED,4BAAmB,SAAnB,EAAoC;MAElC,IAAM,oBAAoB,GAAG,KAAK,aAAL,CAAmB,aAAnB,GAEzB,KAAK,aAAL,CAAmB,aAAnB,CAAiC,SAAjC,CAFyB,GAIzB,KAAK,aAAL,CAAmB,SAAnB,CAA6B,SAA7B,EAAwC,MAJ5C;;MAKA,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,SAAtC;;MACA,KAAK,cAAL,IAAuB,oBAAvB;MACA,IAAA,kBAAA,EACE,KAAK,cAAL,IAAuB,CADzB;;MAKA,IAAI,CAAC,KAAK,cAAN,IAAwB,qBAAA,CAAS,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,aAAxE,EAAuF;QACrF,KAAK,aAAL,CAAmB,aAAnB;MACD;IACF;;;WAED,4BAAmB,YAAnB,EAA6C;MAC3C,IAAM,yBAAyB,GAAG,YAAY,CAAC,4BAAD,CAA9C;;MACA,IAAI,CAAC,yBAAL,EAAgC;QAC9B;MACD;;MAED,IAAI,YAAY,yBAAhB,EAA2C;QAEzC,yBAAyB,CAAC,MAA1B;MACD,CAHD,MAGO,IAAI,wBAAwB,KAAK,aAAjC,EAAgD;QACrD,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,yBAAtC;MACD;;MACD,KAAK,cAAL;MAIA,OAAO,YAAY,CAAC,4BAAD,CAAnB;;MAGA,YAAY,CAAC,MAAb,GAAsB,YAAK,CAAG,CAA9B;;MAEA,IAAI,CAAC,KAAK,cAAN,IAAwB,qBAAA,CAAS,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,aAAxE,EAAuF;QACrF,KAAK,aAAL,CAAmB,aAAnB;MACD;IACF;;;WAED,cAAK,SAAL,EAAwC;MAAA;;MAAA,kCAAb,MAAa;QAAb,MAAa;MAAA;;MACtC,4BAAK,aAAL,EAAmB,IAAnB,6BAAwB,SAAxB,SAAsC,MAAtC;IACD","sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}