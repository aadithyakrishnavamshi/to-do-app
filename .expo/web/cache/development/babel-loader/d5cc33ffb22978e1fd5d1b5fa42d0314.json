{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationBuilder;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _routers = require(\"@react-navigation/routers\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactIs = require(\"react-is\");\n\nvar _Group = _interopRequireDefault(require(\"./Group\"));\n\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\n\nvar _isRecordEqual = _interopRequireDefault(require(\"./isRecordEqual\"));\n\nvar _NavigationHelpersContext = _interopRequireDefault(require(\"./NavigationHelpersContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\n\nvar _Screen = _interopRequireDefault(require(\"./Screen\"));\n\nvar _types = require(\"./types\");\n\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\n\nvar _useComponent = _interopRequireDefault(require(\"./useComponent\"));\n\nvar _useCurrentRender = _interopRequireDefault(require(\"./useCurrentRender\"));\n\nvar _useDescriptors = _interopRequireDefault(require(\"./useDescriptors\"));\n\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\n\nvar _useFocusedListenersChildrenAdapter = _interopRequireDefault(require(\"./useFocusedListenersChildrenAdapter\"));\n\nvar _useFocusEvents = _interopRequireDefault(require(\"./useFocusEvents\"));\n\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\n\nvar _useNavigationHelpers = _interopRequireDefault(require(\"./useNavigationHelpers\"));\n\nvar _useOnAction = _interopRequireDefault(require(\"./useOnAction\"));\n\nvar _useOnGetState = _interopRequireDefault(require(\"./useOnGetState\"));\n\nvar _useOnRouteFocus = _interopRequireDefault(require(\"./useOnRouteFocus\"));\n\nvar _useRegisterNavigator = _interopRequireDefault(require(\"./useRegisterNavigator\"));\n\nvar _useScheduleUpdate = _interopRequireDefault(require(\"./useScheduleUpdate\"));\n\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n_types.PrivateValueStore;\n\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === _Group.default) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push.apply(acc, (0, _toConsumableArray2.default)(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.default ? groupOptions : groupOptions != null ? [].concat((0, _toConsumableArray2.default)(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n          name = _config$props.name,\n          children = _config$props.children,\n          component = _config$props.component,\n          getComponent = _config$props.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.default)();\n  var route = React.useContext(_NavigationRouteContext.default);\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = (0, _objectWithoutProperties2.default)(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter((0, _extends3.default)({}, rest, route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return (0, _extends3.default)(acc, (0, _defineProperty2.default)({}, curr, screens[curr].props.getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(_NavigationStateContext.default),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr].props.initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? (0, _extends3.default)({}, initialParams, initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!(0, _isArrayEqual.default)(state.routeNames, routeNames) || !(0, _isRecordEqual.default)(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.default)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = (0, _useEventEmitter.default)(function (e) {\n    var _ref;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, (0, _toConsumableArray2.default)(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)([screenListeners].concat((0, _toConsumableArray2.default)(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.default)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = (0, _useOnAction.default)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.default)({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.default)({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  (0, _useFocusedListenersChildrenAdapter.default)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.default)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = (0, _useDescriptors.default)({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  (0, _useCurrentRender.default)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.default)(_NavigationHelpersContext.default.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","isValidKey","key","getRouteConfigsFromChildren","configs","React","child","JSON","acc","keys","options","props","groupOptions","name","String","process","config","getComponent","children","component","isValidElementType","console","navigatorKey","route","rest","current","router","createRouter","initialRouteName","screen","routeConfigs","screens","routeNames","routeKeyList","routeParamList","initialParams","routeGetIdList","getId","isStateValid","state","isStateInitialized","getState","setState","getIsInitial","stateCleanedUp","cleanUpState","setCurrentState","initialRouteParamList","initialParamsFromParams","currentState","previousRouteKeyListRef","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","routeKeyChanges","Object","previousNestedParamsRef","previousParams","action","CommonActions","params","path","updatedState","shouldUpdate","useScheduleUpdate","setKey","setTimeout","getCurrentState","getKey","initializedStateRef","emitter","useEventEmitter","e","navigation","descriptors","listeners","map","type","cb","self","listener","useFocusEvents","data","addListener","addKeyedListener","onAction","useOnAction","actionListeners","childListeners","beforeRemoveListeners","keyedListeners","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","screenOptions","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent","NavigationHelpersContext","value"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}