{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StackActions = void 0;\nexports.default = StackRouter;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\n\nvar StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexports.StackActions = StackActions;\n\nfunction StackRouter(options) {\n  var router = (0, _extends2.default)({}, _BaseRouter.default, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + (0, _nonSecure.nanoid)(),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: initialRouteName + \"-\" + (0, _nonSecure.nanoid)(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return (0, _extends2.default)({}, route, {\n          key: route.key || route.name + \"-\" + (0, _nonSecure.nanoid)(),\n          params: routeParamList[route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[route.name], route.params) : route.params\n        });\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + (0, _nonSecure.nanoid)(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + (0, _nonSecure.nanoid)(),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeKeyChanges = _ref3.routeKeyChanges;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + (0, _nonSecure.nanoid)(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return (0, _extends2.default)({}, state, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return (0, _extends2.default)({}, state, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            var _action$payload = action.payload,\n                name = _action$payload.name,\n                key = _action$payload.key,\n                params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return (0, _extends2.default)({}, state, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : name + \"-\" + (0, _nonSecure.nanoid)(),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? (0, _extends2.default)({}, routeParamList[name], params) : params\n                } : route;\n              })\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            var route = id ? state.routes.find(function (route) {\n              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              }));\n            }) : undefined;\n            var routes;\n\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push((0, _extends2.default)({}, route, {\n                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }));\n            } else {\n              routes = [].concat((0, _toConsumableArray2.default)(state.routes), [{\n                key: action.payload.name + \"-\" + (0, _nonSecure.nanoid)(),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }]);\n            }\n\n            return (0, _extends2.default)({}, state, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n\n              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n\n              return (0, _extends2.default)({}, state, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n\n            var _index2 = -1;\n\n            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n\n            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({\n              params: action.payload.params\n            });\n\n            if (_id) {\n              _index2 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({\n                  params: route.params\n                }));\n              });\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n\n              var _routes2 = [].concat((0, _toConsumableArray2.default)(state.routes), [{\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : action.payload.name + \"-\" + (0, _nonSecure.nanoid)(),\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }]);\n\n              return (0, _extends2.default)({}, state, {\n                routes: _routes2,\n                index: _routes2.length - 1\n              });\n            }\n\n            var _route = state.routes[_index2];\n\n            var _params;\n\n            if (action.payload.merge) {\n              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[_route.name], _route.params, action.payload.params) : _route.params;\n            } else {\n              _params = routeParamList[_route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[_route.name], action.payload.params) : action.payload.params;\n            }\n\n            return (0, _extends2.default)({}, state, {\n              index: _index2,\n              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? (0, _extends2.default)({}, _route, {\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : _route.path,\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":{"version":3,"sources":["StackRouter.tsx"],"names":["StackActions","replace","type","payload","name","params","push","pop","count","popToTop","router","getInitialState","routeParamList","initialRouteName","options","routeNames","stale","key","index","routes","getRehydratedState","state","route","getStateForRouteNamesChange","routeKeyChanges","Math","getStateForRouteFocus","r","getStateForAction","action","getId","id","i","path","target","source","BaseRouter","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"script"}