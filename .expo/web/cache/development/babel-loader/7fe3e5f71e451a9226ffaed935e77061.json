{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useChildListeners;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useChildListeners() {\n  var _React$useRef = React.useRef({\n    action: [],\n    focus: []\n  }),\n      listeners = _React$useRef.current;\n\n  var addListener = React.useCallback(function (type, listener) {\n    listeners[type].push(listener);\n    var removed = false;\n    return function () {\n      var index = listeners[type].indexOf(listener);\n\n      if (!removed && index > -1) {\n        removed = true;\n        listeners[type].splice(index, 1);\n      }\n    };\n  }, [listeners]);\n  return {\n    listeners: listeners,\n    addListener: addListener\n  };\n}","map":{"version":3,"sources":["useChildListeners.tsx"],"names":["current","listeners","action","focus","addListener","removed","index"],"mappings":";;;;;AAAA;;;;;;AAOe,SAAA,iBAAA,GAA6B;EAC1C,oBAA+B,KAAK,CAAL,MAAA,CAE5B;IACDE,MAAM,EADL,EAAA;IAEDC,KAAK,EAAE;EAFN,CAF4B,CAA/B;EAAA,IAAiBF,SAAjB,iBAAQD,OAAR;;EAOA,IAAMI,WAAW,GAAG,KAAK,CAAL,WAAA,CAClB,UAAA,IAAA,EAAA,QAAA,EAAoE;IAClEH,SAAS,CAATA,IAAS,CAATA,CAAAA,IAAAA,CAAAA,QAAAA;IAEA,IAAII,OAAO,GAAX,KAAA;IACA,OAAO,YAAM;MACX,IAAMC,KAAK,GAAGL,SAAS,CAATA,IAAS,CAATA,CAAAA,OAAAA,CAAd,QAAcA,CAAd;;MAEA,IAAI,CAAA,OAAA,IAAYK,KAAK,GAAG,CAAxB,CAAA,EAA4B;QAC1BD,OAAO,GAAPA,IAAAA;QACAJ,SAAS,CAATA,IAAS,CAATA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;MACD;IANH,CAAA;EALgB,CAAA,EAclB,CAdF,SAcE,CAdkB,CAApB;EAiBA,OAAO;IACLA,SADK,EACLA,SADK;IAELG,WAAAA,EAAAA;EAFK,CAAP;AAID","sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      listeners[type].push(listener);\n\n      let removed = false;\n      return () => {\n        const index = listeners[type].indexOf(listener);\n\n        if (!removed && index > -1) {\n          removed = true;\n          listeners[type].splice(index, 1);\n        }\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}