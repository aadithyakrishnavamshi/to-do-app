{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusEffect;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useFocusEffect(effect) {\n  var navigation = (0, _useNavigation.default)();\n\n  if (arguments[1] !== undefined) {\n    var message = \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" + \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    // Your code here\\n' + '  }, [depA, depB])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n    console.error(message);\n  }\n\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n\n    var callback = function callback() {\n      var destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        var _message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          _message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          _message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          _message += \" You returned '\" + JSON.stringify(destroy) + \"'.\";\n        }\n\n        console.error(_message);\n      }\n    };\n\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["navigation","arguments","message","console","React","isFocused","callback","destroy","effect","process","JSON","cleanup","unsubscribeFocus","unsubscribeBlur"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;AAWe,SAAA,cAAA,CAAA,MAAA,EAAgD;EAC7D,IAAMA,UAAU,GAAhB,IAAA,sBAAA,GAAA;;EAEA,IAAIC,SAAS,CAATA,CAAS,CAATA,KAAJ,SAAA,EAAgC;IAC9B,IAAMC,OAAO,GACX,yFAAA,8EAAA,GAAA,mBAAA,GAAA,+BAAA,GAAA,yBAAA,GAAA,sBAAA,GAAA,QAAA,GADF,oEAAA;IAUAC,OAAO,CAAPA,KAAAA,CAAAA,OAAAA;EACD;;EAEDC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAIC,SAAS,GAAb,KAAA;IACA,IAAA,OAAA;;IAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;MACrB,IAAMC,OAAO,GAAGC,MAAhB,EAAA;;MAEA,IAAID,OAAO,KAAPA,SAAAA,IAAyB,OAAA,OAAA,KAA7B,UAAA,EAA4D;QAC1D,OAAA,OAAA;MACD;;MAED,IAAIE,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;QACzC,IAAIP,QAAO,GAAX,6FAAA;;QAGA,IAAIK,OAAO,KAAX,IAAA,EAAsB;UACpBL,QAAO,IAAPA,kGAAAA;QADF,CAAA,MAGO,IAAI,OAAQK,OAAD,CAAP,IAAA,KAAJ,UAAA,EAAiD;UACtDL,QAAO,IACL,0FAAA,uDAAA,GAAA,8BAAA,GAAA,mBAAA,GAAA,8BAAA,GAAA,oCAAA,GAAA,+BAAA,GAAA,uDAAA,GAAA,gBAAA,GAAA,WAAA,GAAA,oBAAA,GAAA,kBAAA,GAAA,QAAA,GADFA,oEAAAA;QADK,CAAA,MAgBA;UACLA,QAAO,wBAAsBQ,IAAI,CAAJA,SAAAA,CAA7BR,OAA6BQ,CAAtB,OAAPR;QACD;;QAEDC,OAAO,CAAPA,KAAAA,CAAAA,QAAAA;MACD;IAvCiB,CAIpB;;IAuCA,IAAIH,UAAU,CAAd,SAAIA,EAAJ,EAA4B;MAC1BW,OAAO,GAAGL,QAAVK,EAAAA;MACAN,SAAS,GAATA,IAAAA;IACD;;IAED,IAAMO,gBAAgB,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAgC,YAAM;MAG7D,IAAA,SAAA,EAAe;QACb;MACD;;MAED,IAAID,OAAO,KAAX,SAAA,EAA2B;QACzBA,OAAO;MACR;;MAEDA,OAAO,GAAGL,QAAVK,EAAAA;MACAN,SAAS,GAATA,IAAAA;IAZF,CAAyB,CAAzB;IAeA,IAAMQ,eAAe,GAAG,UAAU,CAAV,WAAA,CAAA,MAAA,EAA+B,YAAM;MAC3D,IAAIF,OAAO,KAAX,SAAA,EAA2B;QACzBA,OAAO;MACR;;MAEDA,OAAO,GAAPA,SAAAA;MACAN,SAAS,GAATA,KAAAA;IANF,CAAwB,CAAxB;IASA,OAAO,YAAM;MACX,IAAIM,OAAO,KAAX,SAAA,EAA2B;QACzBA,OAAO;MACR;;MAEDC,gBAAgB;MAChBC,eAAe;IANjB,CAAA;EAxEFT,CAAAA,EAgFG,CAAA,MAAA,EAhFHA,UAgFG,CAhFHA;AAiFD","sourcesContent":["import * as React from 'react';\n\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    const message =\n      \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" +\n      \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" +\n      'useFocusEffect(\\n' +\n      '  React.useCallback(() => {\\n' +\n      '    // Your code here\\n' +\n      '  }, [depA, depB])\\n' +\n      ');\\n\\n' +\n      'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n\n    console.error(message);\n  }\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            ');\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]},"metadata":{},"sourceType":"script"}