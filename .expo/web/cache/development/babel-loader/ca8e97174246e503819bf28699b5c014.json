{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"DEFAULT_ICON_COLOR\", {\n  enumerable: true,\n  get: function get() {\n    return _createIconSet.DEFAULT_ICON_COLOR;\n  }\n});\nObject.defineProperty(exports, \"DEFAULT_ICON_SIZE\", {\n  enumerable: true,\n  get: function get() {\n    return _createIconSet.DEFAULT_ICON_SIZE;\n  }\n});\nexports.default = _default;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _createIconSet = _interopRequireWildcard(require(\"./vendor/react-native-vector-icons/lib/create-icon-set\"));\n\nvar _iconButton = _interopRequireDefault(require(\"./vendor/react-native-vector-icons/lib/icon-button\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\adars\\\\AdarshToDo\\\\node_modules\\\\@expo\\\\vector-icons\\\\build\\\\createIconSet.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _default(glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n\n  var font = (0, _defineProperty2.default)({}, fontName, expoAssetId);\n  var RNVIconComponent = (0, _createIconSet.default)(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    (0, _inherits2.default)(Icon, _React$Component);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Icon);\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n\n    (0, _createClass2.default)(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regenerator.default.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regenerator.default.awrap(Font.loadAsync(font));\n\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n          console.warn(\"\\\"\" + this.props.name + \"\\\" is not a valid icon name for family \\\"\" + fontName + \"\\\"\");\n        }\n\n        if (!this.state.fontIsLoaded) {\n          return _react.default.createElement(_reactNative.Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 28\n            }\n          });\n        }\n\n        return _react.default.createElement(RNVIconComponent, (0, _extends2.default)({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }\n        }));\n      }\n    }]);\n    return Icon;\n  }(_react.default.Component), _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = (0, _iconButton.default)(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAUA;;AACA;;;;;;;;;;;;AAyFc,kBACZ,QADY,EAEZ,QAFY,EAGZ,WAHY,EAIZ,SAJY,EAIG;;;EAEf,IAAM,IAAI,qCAAM,QAAN,EAAiB,WAAjB,CAAV;EACA,IAAM,gBAAgB,GAAG,IAAA,sBAAA,EAAc,QAAd,EAAwB,QAAxB,EAAkC,IAAlC,EAAwC,SAAxC,CAAzB;EAEA,OAAA,EAAA;IAAA;;IAAA;;IAAO,gBAAA;MAAA;;MAAA;;MASL,MAAA,QAAA,GAAW,KAAX;MAGA,MAAA,KAAA,GAAQ;QACN,YAAY,EAAE,IAAI,CAAC,QAAL,CAAc,QAAd;MADR,CAAR;MAZK;IAsDN;;IAtDD;MAAA;MAAA,OAgBE;QAAA;UAAA;YAAA;cAAA;gBACE,KAAK,QAAL,GAAgB,IAAhB;;gBADF,IAEO,KAAK,KAAL,CAAW,YAFlB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,kCAGU,IAAI,CAAC,SAAL,CAAe,IAAf,CAHV;;cAAA;gBAII,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc;kBAAE,YAAY,EAAE;gBAAhB,CAAd,CAAjB;;cAJJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAhBF;MAAA;MAAA,OAwBE,gCAAoB;QAClB,KAAK,QAAL,GAAgB,KAAhB;MACD;IA1BH;MAAA;MAAA,OA4BE,wBAAe,KAAf,EAAoB;QAClB,IAAI,KAAK,KAAT,EAAgB;UACd,KAAK,KAAL,CAAW,cAAX,CAA0B,KAA1B;QACD;MACF;IAhCH;MAAA;MAAA,OAkCE,kBAAM;QAAA;;QACJ,IAAI,OAAO,IAAI,KAAK,KAAL,CAAW,IAAtB,IAA8B,EAAE,KAAK,KAAL,CAAW,IAAX,IAAmB,QAArB,CAAlC,EAAkE;UAChE,OAAO,CAAC,IAAR,QACM,KAAK,KAAL,CAAW,IADjB,iDAC+D,QAD/D;QAGD;;QAED,IAAI,CAAC,KAAK,KAAL,CAAW,YAAhB,EAA8B;UAC5B,OAAO,6BAAC,iBAAD;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,EAAP;QACD;;QAED,OACE,6BAAC,gBAAD;UACE,GAAG,EAAE,aAAC,IAAD,EAAS;YACZ,MAAI,CAAC,KAAL,GAAa,IAAb;UACD;QAHH,GAIM,KAAK,KAJX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GADF;MAQD;IArDH;IAAA;EAAA,EAA0B,cAAA,CAAM,SAAhC,CAAA,EACS,EAAA,CAAA,YAAA,GAAe,gBAAgB,CAAC,YADzC,EAES,EAAA,CAAA,MAAA,GAAS,IAAA,mBAAA,EAA0B,EAA1B,CAFlB,EAGS,EAAA,CAAA,QAAA,GAAW,QAHpB,EAIS,EAAA,CAAA,cAAA,GAAiB;IAAA,OAAM,QAAN;EAAA,CAJ1B,EAKS,EAAA,CAAA,aAAA,GAAgB;IAAA,OAAM,QAAN;EAAA,CALzB,EAMS,EAAA,CAAA,QAAA,GAAW;IAAA,OAAM,IAAI,CAAC,SAAL,CAAe,IAAf,CAAN;EAAA,CANpB,EAOS,EAAA,CAAA,IAAA,GAAO,IAPhB,EAsDE,EAtDF;AAuDD","sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(\n          `\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`\n        );\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}