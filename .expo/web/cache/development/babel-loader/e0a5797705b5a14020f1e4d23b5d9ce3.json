{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodedError = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar CodedError = function (_Error) {\n  (0, _inherits2.default)(CodedError, _Error);\n\n  var _super = _createSuper(CodedError);\n\n  function CodedError(code, message) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CodedError);\n    _this = _super.call(this, message);\n    _this.code = code;\n    return _this;\n  }\n\n  return (0, _createClass2.default)(CodedError);\n}((0, _wrapNativeSuper2.default)(Error));\n\nexports.CodedError = CodedError;","map":{"version":3,"sources":["../../src/errors/CodedError.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAKa,U;;;;;EAIX,oBAAY,IAAZ,EAA0B,OAA1B,EAAyC;IAAA;;IAAA;IACvC,0BAAM,OAAN;IACA,MAAK,IAAL,GAAY,IAAZ;IAFuC;EAGxC;;;iCAP6B,K","sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}