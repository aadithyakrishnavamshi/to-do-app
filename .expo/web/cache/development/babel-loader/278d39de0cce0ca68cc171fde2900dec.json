{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationCache;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _routers = require(\"@react-navigation/routers\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _excluded = [\"emit\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useNavigationCache(_ref) {\n  var state = _ref.state,\n      getState = _ref.getState,\n      navigation = _ref.navigation,\n      _setOptions = _ref.setOptions,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n      stackRef = _React$useContext.stackRef;\n\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n  var actions = (0, _extends3.default)({}, router.actionCreators, _routers.CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n          rest = (0, _objectWithoutProperties2.default)(navigation, _excluded);\n\n      var _dispatch = function dispatch(thunk) {\n        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch((0, _extends3.default)({\n            source: route.key\n          }, action));\n        }\n      };\n\n      var withStack = function withStack(callback) {\n        var isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return withStack(function () {\n            return _dispatch(actions[name].apply(actions, args));\n          });\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = (0, _extends3.default)({}, rest, helpers, emitter.create(route.key), {\n        dispatch: function dispatch(thunk) {\n          return withStack(function () {\n            return _dispatch(thunk);\n          });\n        },\n        getParent: function getParent(id) {\n          if (id !== undefined && id === rest.getId()) {\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return (0, _extends3.default)({}, o, (0, _defineProperty2.default)({}, route.key, (0, _extends3.default)({}, o[route.key], options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["emitter","stackRef","React","cache","current","actions","router","CommonActions","previous","route","acc","rest","dispatch","thunk","action","getState","navigation","source","withStack","callback","isStackSet","process","helpers","args","getParent","id","setOptions","options","o","isFocused","state"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"script"}