{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createMemoryHistory;\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nfunction createMemoryHistory() {\n  var index = 0;\n  var items = [];\n  var pending = [];\n\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n\n        return _index > -1 ? _index : 0;\n      }\n\n      return 0;\n    },\n\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n          state = _ref2.state;\n      interrupt();\n      var id = (0, _nonSecure.nanoid)();\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n\n      var path = _ref3.path,\n          state = _ref3.state;\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : (0, _nonSecure.nanoid)();\n\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        items = [{\n          path: path,\n          state: state,\n          id: id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n      var nextIndex = index + n;\n      var lastItemIndex = items.length - 1;\n\n      if (n < 0 && !items[nextIndex]) {\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        var onPopState = function onPopState() {\n          var _window$history$state4;\n\n          var id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          });\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n}","map":{"version":3,"sources":["createMemoryHistory.tsx"],"names":["index","items","pending","interrupt","it","cb","history","id","window","item","get","backIndex","path","i","push","state","replace","go","nextIndex","lastItemIndex","n","done","interrupted","clearTimeout","reject","title","resolve","ref","timer","setTimeout","onPopState","currentIndex","Math","last","listen","listener"],"mappings":"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","sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"]},"metadata":{},"sourceType":"script"}