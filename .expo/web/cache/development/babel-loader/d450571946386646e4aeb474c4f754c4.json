{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaybeScreen = MaybeScreen;\nexports.MaybeScreenContainer = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _elements = require(\"@react-navigation/elements\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _excluded = [\"enabled\"],\n    _excluded2 = [\"visible\", \"children\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nvar MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var _Screens, _Screens$screensEnabl;\n\n  var enabled = _ref.enabled,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  if ((_Screens = Screens) !== null && _Screens !== void 0 && (_Screens$screensEnabl = _Screens.screensEnabled) !== null && _Screens$screensEnabl !== void 0 && _Screens$screensEnabl.call(_Screens)) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(_reactNative.View, rest);\n};\n\nexports.MaybeScreenContainer = MaybeScreenContainer;\n\nfunction MaybeScreen(_ref2) {\n  var _Screens2, _Screens2$screensEnab;\n\n  var visible = _ref2.visible,\n      children = _ref2.children,\n      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n\n  if ((_Screens2 = Screens) !== null && _Screens2 !== void 0 && (_Screens2$screensEnab = _Screens2.screensEnabled) !== null && _Screens2$screensEnab !== void 0 && _Screens2$screensEnab.call(_Screens2)) {\n    return React.createElement(Screens.Screen, _extends({\n      activityState: visible ? 2 : 0\n    }, rest), children);\n  }\n\n  return React.createElement(_elements.ResourceSavingView, _extends({\n    visible: visible\n  }, rest), children);\n}","map":{"version":3,"sources":["ScreenFallback.tsx"],"names":["Screens","require","MaybeScreenContainer","rest","enabled","visible"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAA,OAAA;;AAEA,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU,CAEX;;AAEM,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,IAAA,EAO9B;EAAA,IAAA,QAAA,EAAA,qBAAA;;EAP+B,IAAA,OAAA,GAO/B,IAP+B,CAAA,OAAA;EAAA,IAEhCC,IAFgC,0CAO/B,IAP+B;;EAQnC,IAAA,CAAA,QAAA,GAAA,OAAA,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,IAAA,CAAA,qBAAA,GAAIH,QAAAA,CAAJ,cAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIA,qBAAAA,CAAAA,IAAAA,CAAJ,QAAIA,CAAJ,EAAiC;IAC/B,OAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,EAAA,QAAA,CAAA;MAAyB,OAAO,EAAEI;IAAlC,CAAA,EAAP,IAAO,CAAA,CAAP;EACD;;EAED,OAAO,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAP,IAAO,CAAP;AAZK,CAAA;;;;AAeA,SAAA,WAAA,CAAA,KAAA,EAA4D;EAAA,IAAA,SAAA,EAAA,qBAAA;;EAAvC,IAAA,OAAA,GAAuC,KAAvC,CAAA,OAAA;EAAA,IAAA,QAAA,GAAuC,KAAvC,CAAA,QAAA;EAAA,IAAwBD,IAAxB,0CAAuC,KAAvC;;EAC1B,IAAA,CAAA,SAAA,GAAA,OAAA,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,IAAA,CAAA,qBAAA,GAAIH,SAAAA,CAAJ,cAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIA,qBAAAA,CAAAA,IAAAA,CAAJ,SAAIA,CAAJ,EAAiC;IAC/B,OACE,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;MAAgB,aAAa,EAAEK,OAAO,GAAA,CAAA,GAAO;IAA7C,CAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;EAKD;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,4BAAA,EAAA,QAAA,CAAA;IAAoB,OAAO,EAAEA;EAA7B,CAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAKD","sourcesContent":["import { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { StyleProp, View, ViewProps, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  hasTwoStates: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ visible, children, ...rest }: Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen activityState={visible ? 2 : 0} {...rest}>\n        {children}\n      </Screens.Screen>\n    );\n  }\n\n  return (\n    <ResourceSavingView visible={visible} {...rest}>\n      {children}\n    </ResourceSavingView>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}