{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _routers = require(\"@react-navigation/routers\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _checkDuplicateRouteNames = _interopRequireDefault(require(\"./checkDuplicateRouteNames\"));\n\nvar _checkSerializable = _interopRequireDefault(require(\"./checkSerializable\"));\n\nvar _createNavigationContainerRef = require(\"./createNavigationContainerRef\");\n\nvar _EnsureSingleNavigator = _interopRequireDefault(require(\"./EnsureSingleNavigator\"));\n\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _NavigationContainerRefContext = _interopRequireDefault(require(\"./NavigationContainerRefContext\"));\n\nvar _NavigationContext = _interopRequireDefault(require(\"./NavigationContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _NavigationStateContext = _interopRequireDefault(require(\"./NavigationStateContext\"));\n\nvar _UnhandledActionContext = _interopRequireDefault(require(\"./UnhandledActionContext\"));\n\nvar _useChildListeners2 = _interopRequireDefault(require(\"./useChildListeners\"));\n\nvar _useEventEmitter = _interopRequireDefault(require(\"./useEventEmitter\"));\n\nvar _useKeyedChildListeners = _interopRequireDefault(require(\"./useKeyedChildListeners\"));\n\nvar _useOptionsGetters2 = _interopRequireDefault(require(\"./useOptionsGetters\"));\n\nvar _useScheduleUpdate = require(\"./useScheduleUpdate\");\n\nvar _useSyncState3 = _interopRequireDefault(require(\"./useSyncState\"));\n\nvar _excluded = [\"key\", \"routeNames\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = (0, _objectWithoutProperties2.default)(state, _excluded);\n  return (0, _extends2.default)({}, partialState, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return (0, _extends2.default)({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(_NavigationStateContext.default);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = (0, _useSyncState3.default)(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = (0, _slicedToArray2.default)(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = (0, _useChildListeners2.default)(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = (0, _useKeyedChildListeners.default)(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch((0, _extends2.default)({}, _routers.CommonActions.reset(state), {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state == null) {\n      return undefined;\n    }\n\n    var route = (0, _findFocusedRoute.default)(state);\n    return route;\n  }, [getRootState]);\n  var emitter = (0, _useEventEmitter.default)();\n\n  var _useOptionsGetters = (0, _useOptionsGetters2.default)({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  var navigation = React.useMemo(function () {\n    return (0, _extends2.default)({}, Object.keys(_routers.CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(_routers.CommonActions[name].apply(_routers.CommonActions, arguments));\n      };\n\n      return acc;\n    }, {}), emitter.create('root'), {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = (0, _checkSerializable.default)(hydratedState);\n\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n              reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n\n        var duplicateRouteNamesResult = (0, _checkDuplicateRouteNames.default)(hydratedState);\n\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(_NavigationContainerRefContext.default.Provider, {\n    value: navigation\n  }, React.createElement(_useScheduleUpdate.ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(_NavigationBuilderContext.default.Provider, {\n    value: builderContext\n  }, React.createElement(_NavigationStateContext.default.Provider, {\n    value: context\n  }, React.createElement(_UnhandledActionContext.default.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(_EnsureSingleNavigator.default, null, children))))));\n\n  if (independent) {\n    element = React.createElement(_NavigationRouteContext.default.Provider, {\n      value: undefined\n    }, React.createElement(_NavigationContext.default.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nvar _default = BaseNavigationContainer;\nexports.default = _default;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","partialState","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","navigatorKeyRef","getKey","setKey","key","addListener","addKeyedListener","dispatch","action","listeners","console","navigation","canGoBack","handled","resetRoot","target","CommonActions","keyedListeners","getRootState","getCurrentRoute","findFocusedRoute","emitter","getCurrentOptions","useOptionsGetters","acc","isFocused","getParent","getState","stateRef","isReady","onDispatchAction","type","data","noop","stack","stackRef","current","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","scheduleUpdate","flushUpdates","isInitialRef","getIsInitial","context","setState","addOptionsGetter","onStateChangeRef","hydratedState","process","serializableResult","checkSerializable","reason","path","pointer","params","i","location","curr","prev","JSON","message","duplicateRouteNamesResult","checkDuplicateRouteNames","locations","defaultOnUnhandledAction","payload","element","onUnhandledAction","undefined"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"script"}