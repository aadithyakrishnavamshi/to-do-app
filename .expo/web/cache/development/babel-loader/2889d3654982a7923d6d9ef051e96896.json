{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsFocused;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useNavigation = _interopRequireDefault(require(\"./useNavigation\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useIsFocused() {\n  var navigation = (0, _useNavigation.default)();\n\n  var _useState = (0, React.useState)(navigation.isFocused),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isFocused = _useState2[0],\n      setIsFocused = _useState2[1];\n\n  var valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(function () {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return setIsFocused(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return setIsFocused(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useState","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":";;;;;;;;;AAAA;;AAGA;;;;;;AAMe,SAAA,YAAA,GAAiC;EAC9C,IAAMA,UAAU,GAAhB,IAAA,sBAAA,GAAA;;EACA,gBAAkCC,IAAAA,cAAAA,EAASD,UAAU,CAArD,SAAkCC,CAAlC;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EAEA,IAAMC,aAAa,GAAGF,UAAU,CAAhC,SAAsBA,EAAtB;;EAEA,IAAIG,SAAS,KAAb,aAAA,EAAiC;IAM/BC,YAAY,CAAZA,aAAY,CAAZA;EACD;;EAEDC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMC,gBAAgB,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;MAAA,OACvDI,YAAY,CADd,IACc,CAD2C;IAAA,CAAhCJ,CAAzB;IAIA,IAAMO,eAAe,GAAGP,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;MAAA,OACrDI,YAAY,CADd,KACc,CADyC;IAAA,CAA/BJ,CAAxB;IAIA,OAAO,YAAM;MACXM,gBAAgB;MAChBC,eAAe;IAFjB,CAAA;EATFF,CAAAA,EAaG,CAbHA,UAaG,CAbHA;EAeAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA;EAEA,OAAA,aAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"script"}