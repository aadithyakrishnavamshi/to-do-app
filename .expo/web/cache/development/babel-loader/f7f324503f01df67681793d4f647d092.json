{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FA5Style = void 0;\nexports.createFA5iconSet = createFA5iconSet;\n\nvar _reactNative = require(\"react-native\");\n\nvar _createMultiStyleIconSet = _interopRequireDefault(require(\"./createMultiStyleIconSet\"));\n\nvar FA5Style = {\n  regular: 'regular',\n  light: 'light',\n  solid: 'solid',\n  brand: 'brand'\n};\nexports.FA5Style = FA5Style;\n\nfunction createFA5iconSet(glyphMap) {\n  var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fonts = arguments.length > 2 ? arguments[2] : undefined;\n  var pro = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var metadataKeys = Object.keys(metadata);\n  var fontFamily = \"FontAwesome5\" + (pro ? 'Pro' : 'Free');\n\n  function fallbackFamily(glyph) {\n    for (var i = 0; i < metadataKeys.length; i += 1) {\n      var family = metadataKeys[i];\n\n      if (metadata[family].indexOf(glyph) !== -1) {\n        return family === 'brands' ? 'brand' : family;\n      }\n    }\n\n    return 'regular';\n  }\n\n  function glyphValidator(glyph, style) {\n    var family = style === 'brand' ? 'brands' : style;\n    if (metadataKeys.indexOf(family) === -1) return false;\n    return metadata[family].indexOf(glyph) !== -1;\n  }\n\n  function createFontAwesomeStyle(styleName, fontWeight) {\n    var family = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : fontFamily;\n    var fontFile = fonts[styleName];\n    return {\n      fontFamily: family + \"-\" + styleName,\n      fontFile: fontFile,\n      fontStyle: _reactNative.Platform.select({\n        ios: {\n          fontWeight: fontWeight\n        },\n        default: {}\n      }),\n      glyphMap: glyphMap\n    };\n  }\n\n  var brandIcons = createFontAwesomeStyle('Brand', '400');\n  var lightIcons = createFontAwesomeStyle('Light', '100');\n  var regularIcons = createFontAwesomeStyle('Regular', '400');\n  var solidIcons = createFontAwesomeStyle('Solid', '700');\n  var Icon = (0, _createMultiStyleIconSet.default)({\n    brand: brandIcons,\n    light: lightIcons,\n    regular: regularIcons,\n    solid: solidIcons\n  }, {\n    defaultStyle: 'regular',\n    fallbackFamily: fallbackFamily,\n    glyphValidator: glyphValidator\n  });\n  return Icon;\n}","map":{"version":3,"sources":["../src/createIconSetFromFontAwesome5.ts"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;AAEO,IAAM,QAAQ,GAAG;EACtB,OAAO,EAAE,SADa;EAEtB,KAAK,EAAE,OAFe;EAGtB,KAAK,EAAE,OAHe;EAItB,KAAK,EAAE;AAJe,CAAjB;;;AAOD,SAAU,gBAAV,CAA2B,QAA3B,EAAsE;EAAA,IAAjC,QAAiC,uEAAtB,EAAsB;EAAA,IAAlB,KAAkB;EAAA,IAAX,GAAW,uEAAL,KAAK;EAC1E,IAAM,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAArB;EACA,IAAM,UAAU,qBAAkB,GAAG,GAAG,KAAH,GAAW,MAAhC,CAAhB;;EAEA,SAAS,cAAT,CAAwB,KAAxB,EAA6B;IAC3B,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAAY,CAAC,MAAjC,EAAyC,CAAC,IAAI,CAA9C,EAAiD;MAC/C,IAAM,MAAM,GAAG,YAAY,CAAC,CAAD,CAA3B;;MACA,IAAI,QAAQ,CAAC,MAAD,CAAR,CAAiB,OAAjB,CAAyB,KAAzB,MAAoC,CAAC,CAAzC,EAA4C;QAC1C,OAAO,MAAM,KAAK,QAAX,GAAsB,OAAtB,GAAgC,MAAvC;MACD;IACF;;IAED,OAAO,SAAP;EACD;;EAED,SAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,EAAoC;IAClC,IAAM,MAAM,GAAG,KAAK,KAAK,OAAV,GAAoB,QAApB,GAA+B,KAA9C;IACA,IAAI,YAAY,CAAC,OAAb,CAAqB,MAArB,MAAiC,CAAC,CAAtC,EAAyC,OAAO,KAAP;IACzC,OAAO,QAAQ,CAAC,MAAD,CAAR,CAAiB,OAAjB,CAAyB,KAAzB,MAAoC,CAAC,CAA5C;EACD;;EAED,SAAS,sBAAT,CAAgC,SAAhC,EAA2C,UAA3C,EAA0E;IAAA,IAAnB,MAAmB,uEAAV,UAAU;IACxE,IAAI,QAAQ,GAAG,KAAK,CAAC,SAAD,CAApB;IAEA,OAAO;MACL,UAAU,EAAK,MAAL,SAAe,SADpB;MAEL,QAAQ,EAAR,QAFK;MAGL,SAAS,EAAE,qBAAA,CAAS,MAAT,CAAgB;QACzB,GAAG,EAAE;UACH,UAAU,EAAV;QADG,CADoB;QAIzB,OAAO,EAAE;MAJgB,CAAhB,CAHN;MASL,QAAQ,EAAR;IATK,CAAP;EAWD;;EAED,IAAM,UAAU,GAAG,sBAAsB,CAAC,OAAD,EAAU,KAAV,CAAzC;EACA,IAAM,UAAU,GAAG,sBAAsB,CAAC,OAAD,EAAU,KAAV,CAAzC;EACA,IAAM,YAAY,GAAG,sBAAsB,CAAC,SAAD,EAAY,KAAZ,CAA3C;EACA,IAAM,UAAU,GAAG,sBAAsB,CAAC,OAAD,EAAU,KAAV,CAAzC;EACA,IAAM,IAAI,GAAG,IAAA,gCAAA,EACX;IACE,KAAK,EAAE,UADT;IAEE,KAAK,EAAE,UAFT;IAGE,OAAO,EAAE,YAHX;IAIE,KAAK,EAAE;EAJT,CADW,EAOX;IACE,YAAY,EAAE,SADhB;IAEE,cAAc,EAAd,cAFF;IAGE,cAAc,EAAd;EAHF,CAPW,CAAb;EAcA,OAAO,IAAP;AACD","sourcesContent":["import { Platform } from 'react-native';\nimport createMultiStyleIconSet from './createMultiStyleIconSet';\n\nexport const FA5Style = {\n  regular: 'regular',\n  light: 'light',\n  solid: 'solid',\n  brand: 'brand',\n};\n\nexport function createFA5iconSet(glyphMap, metadata = {}, fonts, pro = false) {\n  const metadataKeys = Object.keys(metadata);\n  const fontFamily = `FontAwesome5${pro ? 'Pro' : 'Free'}`;\n\n  function fallbackFamily(glyph) {\n    for (let i = 0; i < metadataKeys.length; i += 1) {\n      const family = metadataKeys[i];\n      if (metadata[family].indexOf(glyph) !== -1) {\n        return family === 'brands' ? 'brand' : family;\n      }\n    }\n\n    return 'regular';\n  }\n\n  function glyphValidator(glyph, style) {\n    const family = style === 'brand' ? 'brands' : style;\n    if (metadataKeys.indexOf(family) === -1) return false;\n    return metadata[family].indexOf(glyph) !== -1;\n  }\n\n  function createFontAwesomeStyle(styleName, fontWeight, family = fontFamily) {\n    let fontFile = fonts[styleName];\n\n    return {\n      fontFamily: `${family}-${styleName}`,\n      fontFile,\n      fontStyle: Platform.select({\n        ios: {\n          fontWeight,\n        },\n        default: {},\n      }),\n      glyphMap,\n    };\n  }\n\n  const brandIcons = createFontAwesomeStyle('Brand', '400');\n  const lightIcons = createFontAwesomeStyle('Light', '100');\n  const regularIcons = createFontAwesomeStyle('Regular', '400');\n  const solidIcons = createFontAwesomeStyle('Solid', '700');\n  const Icon = createMultiStyleIconSet(\n    {\n      brand: brandIcons,\n      light: lightIcons,\n      regular: regularIcons,\n      solid: solidIcons,\n    },\n    {\n      defaultStyle: 'regular',\n      fallbackFamily,\n      glyphValidator,\n    },\n  );\n\n  return Icon;\n}"],"sourceRoot":""},"metadata":{},"sourceType":"script"}