{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ServerContext = _interopRequireDefault(require(\"./ServerContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar _default = React.forwardRef(function ServerContainer(_ref, ref) {\n  var children = _ref.children,\n      location = _ref.location;\n  React.useEffect(function () {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  var current = {};\n\n  if (ref) {\n    var value = {\n      getCurrentOptions: function getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      ref.current = value;\n    }\n  }\n\n  return React.createElement(_ServerContext.default.Provider, {\n    value: {\n      location: location\n    }\n  }, React.createElement(_core.CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});\n\nexports.default = _default;","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["location","React","console","current","value","getCurrentOptions","ref"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;eAce,KAAK,CAAL,UAAA,CAAiB,SAAA,eAAA,CAAA,IAAA,EAAA,GAAA,EAG9B;EAFA,IAAA,QAAA,GAEA,IAFA,CAAA,QAAA;EAAA,IAAYA,QAAZ,GAEA,IAFA,CAAYA,QAAZ;EAGAC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBC,OAAO,CAAPA,KAAAA,CAAAA,sFAAAA;EADFD,CAAAA,EAAAA,EAAAA;EAMA,IAAME,OAA6B,GAAnC,EAAA;;EAEA,IAAA,GAAA,EAAS;IACP,IAAMC,KAAK,GAAG;MACZC,iBADY,+BACQ;QAClB,OAAOF,OAAO,CAAd,OAAA;MACD;IAHW,CAAd;;IAUA,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;MAC7BG,GAAG,CAAHA,KAAG,CAAHA;IADF,CAAA,MAEO;MAELA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;IACD;EACF;;EAED,OACE,KAAA,CAAA,aAAA,CAAA,sBAAA,CAAA,QAAA,EAAA;IAAwB,KAAK,EAAE;MAAEN,QAAAA,EAAAA;IAAF;EAA/B,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,0BAAA,CAAA,QAAA,EAAA;IAA+B,KAAK,EAAEG;EAAtC,CAAA,EAFJ,QAEI,CADF,CADF;AA/BF,CAAe,C","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"script"}