{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScheduleUpdateContext = void 0;\nexports.default = useScheduleUpdate;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nvar ScheduleUpdateContext = React.createContext({\n  scheduleUpdate: function scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates: function flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n});\nexports.ScheduleUpdateContext = ScheduleUpdateContext;\n\nfunction useScheduleUpdate(callback) {\n  var _React$useContext = React.useContext(ScheduleUpdateContext),\n      scheduleUpdate = _React$useContext.scheduleUpdate,\n      flushUpdates = _React$useContext.flushUpdates;\n\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}","map":{"version":3,"sources":["useScheduleUpdate.tsx"],"names":["MISSING_CONTEXT_ERROR","ScheduleUpdateContext","scheduleUpdate","flushUpdates","React"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,qBAAqB,GAA3B,mCAAA;AAEO,IAAMC,qBAAqB,GAAG,KAAK,CAAL,aAAA,CAGlC;EACDC,cADC,4BACgB;IACf,MAAM,IAAA,KAAA,CAAN,qBAAM,CAAN;EAFD,CAAA;EAIDC,YAJC,0BAIc;IACb,MAAM,IAAA,KAAA,CAAN,qBAAM,CAAN;EACD;AANA,CAHkC,CAA9B;;;AAmBQ,SAAA,iBAAA,CAAA,QAAA,EAAiD;EAC9D,wBAAyCC,KAAK,CAALA,UAAAA,CAAzC,qBAAyCA,CAAzC;EAAA,IAAM,cAAN,qBAAM,cAAN;EAAA,IAAwBD,YAAxB,qBAAwBA,YAAxB;;EAIAD,cAAc,CAAdA,QAAc,CAAdA;EAEAE,KAAK,CAALA,SAAAA,CAAAA,YAAAA;AACD","sourcesContent":["import * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\n\nexport const ScheduleUpdateContext = React.createContext<{\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n}>({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    ScheduleUpdateContext\n  );\n\n  scheduleUpdate(callback);\n\n  React.useEffect(flushUpdates);\n}\n"]},"metadata":{},"sourceType":"script"}